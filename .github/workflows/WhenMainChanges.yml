name: Build APP 
run-name: ${{ github.actor }} is Building the APP ðŸš€
on:
#Delete this , just for test
#  pull_request:
#    types: [opened,reopened,edited,synchronize]
#    branches:
#      - main
#    paths:
#      - '**'


  push:
    branches:
      - main
      - release/release*
  workflow_dispatch:
  
jobs:
    Run-tests-and-build:
      name: Run npm test & build
      runs-on: macos-15
      permissions:
        contents: write
        pull-requests: write
        
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            lfs: true



        - name: Install the Apple certificate and provisioning profile
          env:
            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
            DIST_CERTIFICATE_BASE64: ${{ secrets.DIST_CERTIFICATE_BASE64 }}
            P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
            P12_DISS_PASSWORD: ${{ secrets.P12_DISS_PASSWORD }}
            BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
            BUILD_ENT_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_ENT_PROVISION_PROFILE_BASE64 }}
            KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          run: |
              # create variables
              CERTIFICATE_DIS_PATH=$RUNNER_TEMP/dist_certificate.p12
              CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
              PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
              KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  
              # import certificate and provisioning profile from secrets
              echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
              echo -n "$DIST_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_DIS_PATH
              echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
              echo -n "$BUILD_ENT_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH 

              # create temporary keychain
              security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
              security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
              security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  
              # import certificate to keychain
              security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
              security import $CERTIFICATE_DIS_PATH -P "$P12_DISS_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
              security find-certificate $KEYCHAIN_PATH
              security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
              security list-keychain -d user -s $KEYCHAIN_PATH
  
              # apply provisioning profile
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
  
        - name: Test 
          run: 
            |
              xcodebuild test  -scheme EsmorgaiOS -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' ONLY_ACTIVE_ARCH=YES
    
        - name: Build QA .ipa file
          env:
            OUTPUT_PATH: ./build-qa
          run: |
                xcodebuild  \
                           -scheme EsmorgaiOS \
                           -sdk iphoneos \
                           -configuration Release-QA \
                           -archivePath $OUTPUT_PATH/EsmorgaiOS.xcarchive \
                           clean archive
        
                xcodebuild -exportArchive \
                           -archivePath $OUTPUT_PATH/EsmorgaiOS.xcarchive \
                           -exportPath $OUTPUT_PATH \
                           -exportOptionsPlist github.plist
                ls $OUTPUT_PATH/*.ipa

        - name: Build PROD .ipa file
          env:
            OUTPUT_PATH: ./build-prod
          run: |
                xcodebuild  \
                           -scheme EsmorgaiOS \
                           -sdk iphoneos \
                           -configuration Release-PROD \
                           -archivePath $OUTPUT_PATH/EsmorgaiOS.xcarchive \
                           clean archive

                xcodebuild -exportArchive \
                           -archivePath $OUTPUT_PATH/EsmorgaiOS.xcarchive \
                           -exportPath $OUTPUT_PATH \
                           -exportOptionsPlist github.plist
                ls $OUTPUT_PATH/*.ipa

        - name: Upload Release-QA build to OTA
          id: otashare_file_url 
          run: |

                rootDir="./"
                CONFIG_FILE=$rootDir"EsmorgaiOS/Resources/Configuration/BaseConfig.xcconfig"
                QA_CONFIG_FILE=$rootDir"EsmorgaiOS/Resources/Configuration/Config-QA.xcconfig"
                IPAfile=$rootDir"build-qa/EsmorgaiOS.ipa"
                name=iOS_Esmorga_QA
                versionName=$(grep "VERSION" $CONFIG_FILE | awk '{print $3}')
                versionCode=$(grep "PROJECT_BUILD" $QA_CONFIG_FILE | awk '{print $3}')
                buildHash=$(md5sum $fileQA | awk '{print $4}')

                project_id=2793
                api_key=inml59pangaa
                api_key_build=rqFyHkwuA12sUrq9mvxa2be84t2fyu
                visibleClient=true
                buildType="QA"
                name="Esmorga [QA]"
                function main
                {
                  curl  -vs -F "buiFile=@${IPAfile}" \
                      -F "buiName=${name}" \
                      -F "buiVersion=${versionName}" \
                      -F "buiBuildNum=${versionCode}" \
                      -F "buiBuildType=${buildType}" \
                      -F "buiTemplate=0" \
                      -F "buiHash=${buildHash}" \
                      -F "buiVisibleClient=${visibleClient}" \
                      -F "buiChangeLog=none" \
                      -F "buiUser=${{ secrets.BUIUSER }}" -F "buiPassword=${{ secrets.BUIPASSWORD }}" \
                      "https://otashare-api.mobgen.com/v1/builds/registernewbuild/${project_id}/${api_key}/${api_key_build}"
                    }
                    OUT=$(main)
                    echo "url=$(echo "$OUT" | grep https)" >> $GITHUB_OUTPUT
    
        - name: Upload Release-PROD build to OTA
          run: |

                rootDir="./"
                CONFIG_FILE=$rootDir"EsmorgaiOS/Resources/Configuration/BaseConfig.xcconfig"
                PROD_CONFIG_FILE=$rootDir"EsmorgaiOS/Resources//Configuration/Config-PROD.xcconfig"
                IPAfile=$rootDir"build-prod/EsmorgaiOS.ipa"
                name=iOS_Esmorga_PROD
                versionName=$(grep "VERSION" $CONFIG_FILE | awk '{print $3}')
                versionCode=$(grep "PROJECT_BUILD" $PROD_CONFIG_FILE | awk '{print $3}')
                buildHash=$(md5sum $fileQA | awk '{print $4}')

                project_id=2793
                api_key=inml59pangaa
                api_key_build=rqFyHkwuA12sUrq9mvxa2be84t2fyu
                visibleClient=true
                buildType="PROD"
                name="Esmorga [PROD]"
               
                curl -vvv -F "buiFile=@${IPAfile}" \
                    -F "buiName=${name}" \
                    -F "buiVersion=${versionName}" \
                    -F "buiBuildNum=${versionCode}" \
                    -F "buiBuildType=${buildType}" \
                    -F "buiTemplate=0" \
                    -F "buiHash=${buildHash}" \
                    -F "buiVisibleClient=${visibleClient}" \
                    -F "buiChangeLog=none" \
                    -F "buiUser=${{ secrets.BUIUSER }}" -F "buiPassword=${{ secrets.BUIPASSWORD }}" \
                    "https://otashare-api.mobgen.com/v1/builds/registernewbuild/${project_id}/${api_key}/${api_key_build}"

        - name: Trigger E2E Workflow just in QA 
          shell: bash
          run: |
            curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.E2E_Github_Token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/Esmorga-E2E/E2E-APP-Tests/actions/workflows/RunTest.yml/dispatches \
            -d '{"ref":"main","inputs":{"build_url":${{steps.otashare_file_url.outputs.url}},"OS":"ios","Branch":"$(cat .github/tmp/branch.txt)"}}'
          


        - name: Clean up keychain and provisioning profile
          if: ${{ always() }}
          run: |
                  security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
                  rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

